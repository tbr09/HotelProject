@**@@model HotelProject.Models.MapViewModel
@*@model HotelProject.Models.Travel*@
@*@model IEnumerable<HotelProject.Models.Travel>*@

@{
    ViewBag.Title = "Index";
}
<div class="row" style="margin-left:3%; margin-right:3%; margin-top:20px;">

    <h2>Map</h2>

    <button class="btn btn-default" id="dropAttractions" onclick="dropAttractions()">Attractions (Markers)</button>
    <button class="btn btn-default" id="dropAttractions" onclick="dropAttractionsCircle()">Attractions (Circles)</button>
    <button class="btn btn-default" id="dropTour" onclick="dropTour()">Tour (Markers)</button>
    <button class="btn btn-default" id="dropTourCircles" onclick="dropTourCircles()">Tour (Cricles)</button>
    <button class="btn btn-default" id="dropHotels" onclick="dropHotels()">Hotels</button>
    <button class="btn btn-default" id="dropTourPaths" onclick="dropTourPaths()">Tour Paths</button>
    <button class="btn btn-default" id="clearMap" onclick="clearMap()">Clear Map</button>
    <hr />
    <div class="col-md-2 col-xs-2 col-lg-2">
        @using (Html.BeginForm("Index", "Map", FormMethod.Post))
            {
            @Html.DropDownList("SelectedHotel")
            <br />
            @Html.EditorFor(k => k.infoModel);

            <br />
            <button type="submit" class="btn btn-default">Submit</button>
        }

        <h2>Attractivity</h2>
        <span id="score"></span>
    </div>

    <div class="col-lg-10 col-md-12 col-xs-12">
        <div id="map" style="width: 100%; height:450px"></div>
    </div>
</div>s
@Scripts.Render("~/bundles/jquery")
<script>

    var tourDropped = false;
    var map;
    function initMap() {
        var startCenter = { lat: 53.388097, lng: 21.435653 };
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 8,
            center: startCenter,
            mapTypeId: 'terrain'
        });
    }

    var tour = @Html.Raw(Json.Encode(Model.tourResult.tour));
    var attractions = @Html.Raw(Json.Encode(Model.attractions));
    var hotels = @Html.Raw(Json.Encode(Model.hotels));

    function drawCircle() {
        var cityCircle = new google.maps.Circle({
            strokeColor: '#FF00FF',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF00FF',
            fillOpacity: 0.35,
            map: map,
            center: { lat: 23.090, lng: 53.712 },
            radius: 3857
        });
    }

    $(document).ready(function () {
        setTimeout(function () { initMap(); }, 1000);
        //setTimeout(function () { dropTour(); }, 1000);
        //setTimeout(function () { dropTourPaths(); }, 1000);
        setTimeout(function () { dropTourCircles(); }, 1000);
        setTimeout(function () { dropTourPathsCircles(); }, 1000);
    });

    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    //timeout add markers
    var circles = [];
    var tourMarkers = [];
    var tourCircles = [];
    var markers = [];
    var paths = [];
    var infoWindows = [];
    var colors = ['#00ff00', '#660066', '#ff0000', '#003399', '#669999', ' #000000', '#ffffff', '#ff99ff'];

    function dropAttractions() {
        for (var i = 0; i < attractions.length; i++) {
            addMarkerWithTimeout(attractions[i], i * 3, "attraction", false);
        }
    }

    function dropAttractionsCircle() {
        for (var i = 0; i < attractions.length; i++) {
            addCircle(attractions[i], i * 3, "attraction", false);
        }
    }

    function dropTourPathsCircles() {
        if (tourDropped == true)
        {
            if (markers.length == 0)
            {
                var k = 0;
                var z = 0;
                for (var j = 0; j < tour.length; j++) {
                    for (var i = 0; i <= tour[j].attractionList.length; i++) {
                        updateCircle(k, k + 1, z);
                        k++;
                    };
                    k++;
                    z++;
                    @*document.getElementById('score').innerHTML = (14500 - @Model.tourResult.score)/ 145;*@
                    document.getElementById('score').innerHTML = @Model.tourResult.score;
                }
            }
            else {
                var k = 0;
                var z = 0;
                for (var j = 0; j < tour.length; j++) {
                    for (var i = 0; i <= tour[j].attractionList.length; i++) {
                        update(k, k + 1, z);
                        k++;
                    };
                    k++;
                    z++;
                    @*document.getElementById('score').innerHTML = (14500 - @Model.tourResult.score)/ 145;*@
                    document.getElementById('score').innerHTML = @Model.tourResult.score;
                }
            }
        }
    }

    function dropTourPaths() {
       
        if (tourMarkers.length > 0)
        {
            var k = 0;
            var z = 0;
            for (var j = 0; j < tour.length; j++) {
                for (var i=0; i <= tour[j].attractionList.length; i++) {
                    update(k, k + 1,z);
                    k++;
                };
                k++;
                z++;
                @*document.getElementById('score').innerHTML = (14500 - @Model.tourResult.score)/ 145;*@
                document.getElementById('score').innerHTML = @Model.tourResult.score;
            }
        }
        else if (tourCircles.length > 0)
        {
            var k = 0;
            var z = 0;
            for (var j = 0; j < tour.length; j++) {
                for (var i=0; i <= tour[j].attractionList.length; i++) {
                    updateCircle(k, k + 1,z);
                    k++;
                };
                k++;
                z++;
                @*document.getElementById('score').innerHTML = (14500 - @Model.tourResult.score)/ 145;*@
                document.getElementById('score').innerHTML = @Model.tourResult.score;
            }
        }
    }

    function addCircle(x, timeout, choose, isTour) {

            var myPos = { lat: x.geometry.location.lat, lng: x.geometry.location.lng };
            var cityCircle;
            if (choose == "hotel") {
                cityCircle = new google.maps.Circle({
                    strokeColor: '#FFFF00',
                    strokeOpacity: 0.5,
                    strokeWeight: 2,
                    fillColor: '#FFFF00',
                    fillOpacity: 0.5,
                    map: map,
                    center: myPos,
                    radius: x.rating * x.rating * 10
                });
            }
            else {
                cityCircle = new google.maps.Circle({
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.5,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.5,
                    map: map,
                    center: myPos,
                    radius: x.rating * x.rating * 10
                });
            }
            if (isTour == true)
            {
                tourCircles.push(cityCircle);
            }
            else
            {
                circles.push(cityCircle);
            }
    }

    function dropTourCircles() {
        for (var j = 0; j < tour.length; j++) {
            for (var i = 0; i < tour[j].attractionList.length; i++) {
                console.log(tour[j].attractionList[i].rating + "" + i);
            }
        }
        for (var j = 0; j < tour.length; j++) {
            addCircle(tour[j].sourceHotel, 100, "hotel", true);
            for (var i = 0; i < tour[j].attractionList.length; i++) {
                addCircle(tour[j].attractionList[i], 100, "attraction", true);
            }
            addCircle(tour[j].destinationHotel, 100, "hotel", true);
        }
        tourDropped = true;
    }


    function dropTour() {
        clearMarkers();
        for (var j = 0; j < tour.length; j++) {
            for (var i = 0; i < tour[j].attractionList.length; i++) {
                console.log(tour[j].attractionList[i].rating + "" + i);
            }
        }
        for (var j = 0; j < tour.length; j++)
        {
            addMarkerWithTimeout(tour[j].sourceHotel, 100, "hotel", true);
            for (var i = 0; i < tour[j].attractionList.length; i++) {
                addMarkerWithTimeout(tour[j].attractionList[i], 100, "attraction", true);
            }
            addMarkerWithTimeout(tour[j].destinationHotel, 100, "hotel", true);
        }
        tourDropped = true;
    }

    function dropPaths() {
        var z = 0;
        for (var j = 0; j < tour.length; j++) {
            for (var i = 0; i < tour[j].attractionList.length; i++) {
                update(i, i + 1,z);
            }
            x++;
        }
    }

    function dropHotels() {
        for (var i = 0; i < hotels.length; i++) {
            if(hotels[i].rating!=0) addMarkerWithTimeout(hotels[i], i * 3, "hotel");
        }
    }

    function addMarkerWithTimeout(x, timeout, choose, isTour) {
        window.setTimeout(function() {
            var myPos = { lat: x.geometry.location.lat, lng: x.geometry.location.lng };
            var marker;
            if (choose == "hotel")
            {
                marker = new google.maps.Marker({
                    position: myPos,
                    map: map,
                    icon:'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',
                    animation: google.maps.Animation.DROP,
                });
            }
            else
            {
                marker = new google.maps.Marker({
                    position: myPos,
                    map: map,
                    icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                    animation: google.maps.Animation.DROP
                });
            }


            var infowindow = new google.maps.InfoWindow({
                content: 'Name: ' + x.name + '<hr/>Rating:' + x.rating
            });
            marker.addListener('click', function () {
                infowindow.open(map, marker);
            });
            if (isTour == true)
            {
                tourMarkers.push(marker);
            }
            else
            {
                markers.push(marker);
            }
        }, timeout);
    }


    function update(x, y, z) {
        poly = new google.maps.Polyline({
            strokeColor: colors[z],
            strokeOpacity: 1.0,
            strokeWeight: 3,
            map: map,
        });
        var path = [tourMarkers[x].getPosition(), tourMarkers[y].getPosition()];
        poly.setPath(path);
        paths.push(poly);
    }

    function updateCircle(x, y, z) {
        poly = new google.maps.Polyline({
            strokeColor: colors[z],
            strokeOpacity: 1.0,
            strokeWeight: 3,
            map: map,
        });
        var path = [{ lat: tourCircles[x].getCenter().lat(), lng: tourCircles[x].getCenter().lng() }, { lat: tourCircles[y].getCenter().lat(), lng: tourCircles[y].getCenter().lng()} ];
        poly.setPath(path);
        paths.push(poly);
    }

    function clearMap() {
        for (var i = 0; i < paths.length; i++) {
            paths[i].setMap(null);
        }
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        for (var i = 0; i < circles.length; i++) {
            circles[i].setMap(null);
        }
        for (var i = 0; i < infoWindows.length; i++) {
            infoWindows[i].setMap(null);
        }
        for (var i = 0; i < tourMarkers.length; i++) {
            tourMarkers[i].setMap(null);
        }
        for (var i = 0; i < tourCircles.length; i++) {
            tourCircles[i].setMap(null);
        }

        tourDropped = false;
        tourMarkers = [];
        tourCircles = [];
        circles = [];
        markers = [];
        paths = [];
        infoWindows = [];
    }

    function clearMarkers() {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        markers = [];
    }

    function clearPaths() {
        for (var i = 0; i < paths.length;i++)
        {
            paths[i].setMap(null);
        }
    }

    //standard add markers
    /*
    function addMarker(i)
    {
        var x = attractions[i];
        var myPos = { lat: x.geometry.location.lat, lng: x.geometry.location.lng };
        var marker = new google.maps.Marker({
            position: myPos,
            map: map,
            title: 'ggg',
            animation: google.maps.Animation.DROP
        });
        google.maps.event.addListener(marker, 'click', (function (marker, i) {
            return function () {
                infowindow.setContent(locations[i][0]);
                infowindow.open(map, marker);
            }
        })(marker, i));
    }
    for (var i = 0; i < attractions.length; i++) {
        addMarker(i)
    }
    */

</script>
<script async defer type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNItEncriDb-V4vc94EwQlrcq3orKJGjU&callback=initMap">
</script>